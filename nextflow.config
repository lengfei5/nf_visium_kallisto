/*
 * -------------------------------------------------
 *  Nextflow config file for visium axolotl
 * -------------------------------------------------
 *
 */

// Global default params, used in configs
 params {
     container = 'nfcore/rnaseq:1.1' // Container slug. Stable releases should specify release tag!

     // parameters and inputs

     params.samplename = false
     //params.samplename = "GER006_10x"
     params.outdir = "./"
     params.protocol = false
     //params.protocol = "10xv2"
     params.transcriptome = false
     //params.transcriptome = "/links/groups/treutlein/USERS/tomasgomes/gene_refs/axolotl/Amex_T_v47/cDNA_transcripts/AmexT_v47_artificial.fa"
     params.transindex = false
     //params.transindex = "AmexT_v47_artificial.kalid"
     params.reads = false
     //params.reads = "/links/groups/treutlein/USERS/tomasgomes/projects/axolotl/data/raw/Gerber_all10x/GER006_10x/*.fastq.gz"
     params.white = false
     //params.white = "/links/groups/treutlein/USERS/tomasgomes/gene_refs/other/10xv2_whitelist.txt"
     params.t2g = false
     //params.t2g = "/links/groups/treutlein/USERS/tomasgomes/gene_refs/axolotl/Amex_T_v47/cDNA_transcripts/AmexT_v47_artificial_genenames_t2g.txt"
     params.imageal = false
     params.imagef = false

     params.mock = "/groups/tanaka/People/current/jiwang/scripts/nf_visium_kallisto/assets/mock_fastq"
     params.refhs = '/groups/tanaka/People/current/jiwang/Genomes/mouse/spaceranger_refs/refdata-gex-GRCh38-2020-A'

     //multiqc_config = "$baseDir/assets/multiqc_config.yaml"
 }

 profiles {

    standard {
      includeConfig 'conf/base.config'
      includeConfig 'conf/slurm.config'
      //includeConfig 'conf/igenomes.config'
    }

    slurm {
      includeConfig 'conf/base.config'
      includeConfig 'conf/slurm.config'
      //includeConfig 'conf/igenomes.config'
    }

    conda { process.conda = "$baseDir/environment.yml" }
    docker { docker.enabled = true }
    singularity { singularity.enabled = true }

  }


 timeline {
 	enabled = false
 }
 report {
 	enabled = false
 }


 // Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
