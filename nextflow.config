/*
 * -------------------------------------------------
 *  atacseq Nextflow config file
 * -------------------------------------------------
 *
 */

// Global default params, used in configs
 params {
     container = 'nfcore/rnaseq:1.1' // Container slug. Stable releases should specify release tag!

     // Thomas' parameters from nf-smallRNAseq
     outdir    = "."
     reads     = "ngs_raw/*.bam"

     // Options: Generic
     input = './design.csv'
     single_end = false
     seq_center = false
     fragment_size = 0
     fingerprint_bins = 500000

     // Options: genome and annotation
     genome = false
     tss = false

     contamination = "none"
     spikeIn = false

     // options: adapter trimming
     adapter   = 'CTGTCTCTTATACACATCTCCGAGCCCACGAGAC'
     minLength = 10
     overlapLength = 1


     // Options: Alignments
     bwa_min_score = false
     keep_mito = false
     keep_dups = false
     keep_multi_map = false
     skip_merge_replicates = false
     save_align_intermeds = false

     // Options: Peaks
     narrow_peak = false
     broad_cutoff = 0.1
     macs_fdr = false
     macs_pvalue = false
     min_reps_consensus = 1
     save_macs_pileup = false
     skip_peak_qc = false
     skip_peak_annotation = false
     skip_consensus_peaks = false

     // Options: Differential analysis
     deseq2_vst = false
     skip_diff_analysis = false

     // Options: QC
     skip_fastqc = false
     skip_picard_metrics = false
     skip_preseq = false
     skip_plot_profile = false
     skip_plot_fingerprint = false
     skip_ataqv = false
     skip_igv = false
     skip_multiqc = false

     multiqc_config = "$baseDir/assets/multiqc_config.yaml"
 }

 profiles {

    standard {
      includeConfig 'conf/base.config'
      includeConfig 'conf/slurm.config'
      //includeConfig 'conf/igenomes.config'
    }

    slurm {
      includeConfig 'conf/base.config'
      includeConfig 'conf/slurm.config'
      //includeConfig 'conf/igenomes.config'
    }

    conda { process.conda = "$baseDir/environment.yml" }
    docker { docker.enabled = true }
    singularity { singularity.enabled = true }

  }


 timeline {
 	enabled = false
 }
 report {
 	enabled = false
 }


 // Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
